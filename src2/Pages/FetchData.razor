@page "/fetchdata"
@inject HttpClient Http
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using VMStarter.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccessTokenProvider TokenProvider




<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity.Name!</h1>
        <h2>Connect to your VM</h2>
        <p></p>

        @if (vms == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>Name</th>
                        <th>Beschreibung</th>
                        <th>Connect</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var vm in vms)
                    {
                        <tr>
                            <td>@vm.Nr</td>
                            <td>@vm.Name</td>
                            <td>@vm.Beschreibung</td>
                            <td><a type="button" class="btn btn-primary" target="_blank" href="@vm.Url">Start and Connect</a></td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <p>@AccessToken</p>
        
    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>




@code {

    private VM[] vms;
    public string AccessToken;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        
        var user = authState.User;
        
        

        if (user.Identity.IsAuthenticated)
        {
            //_authMessage = $"{user.Identity.Name} is authenticated.";
            //_claims = user.Claims;
            // _surnameMessage =$"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";

            //vms = await Http.GetFromJsonAsync<VM[]>("sample-data/vms.json");

            var accessTokenResult = await TokenProvider.RequestAccessToken();

            if (accessTokenResult.TryGetToken(out var token))
            {
                AccessToken = token.Value;
            }


            vms = await Http.GetFromJsonAsync<VM[]>("api/GetVM");




        } else
        {
            //_authMessage = "The user is NOT authenticated.";
        }

    }

}
